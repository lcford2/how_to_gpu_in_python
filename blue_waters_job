arnoldg@h2ologin4:~/python> cat numba_rng.pbs
#PBS -l nodes=1:ppn=16:xk,walltime=00:30:00
#PBS -q debug
#PBS -N numba_rng

cd $PBS_O_WORKDIR
module load craype-accel-nvidia35
module load bwpy/2.0.4

aprun -b -n 1 bwpy-environ ./numba_rng.sh

arnoldg@h2ologin4:~/python> cat numba_rng.sh
#!/bin/bash
#https://numba.readthedocs.io/en/stable/cuda/random.html#a-simple-example

module load craype-accel-nvidia35
module load bwpy/2.0.4

export NUMBAPRO_NVVM=$CUDATOOLKIT_HOME/nvvm/lib64/libnvvm.so
export NUMBAPRO_LIBDEVICE=$CUDATOOLKIT_HOME/nvvm/libdevice/

python3.6 ./numba_rng.py
arnoldg@h2ologin4:~/python> cat numba_rng.py
from __future__ import print_function, absolute_import


from numba import cuda
from numba.cuda.random import create_xoroshiro128p_states, xoroshiro128p_uniform
_float32
import numpy as np

@cuda.jit
def compute_pi(rng_states, iterations, out):
    """Find the maximum value in values and store in result[0]"""
    thread_id = cuda.grid(1)

    # Compute pi by drawing random (x, y) points and finding what
    # fraction lie inside a unit circle
    inside = 0
    for i in range(iterations):
        x = xoroshiro128p_uniform_float32(rng_states, thread_id)
        y = xoroshiro128p_uniform_float32(rng_states, thread_id)
        if x**2 + y**2 <= 1.0:
            inside += 1

    out[thread_id] = 4.0 * inside / iterations

threads_per_block = 64
blocks = 24
rng_states = create_xoroshiro128p_states(threads_per_block * blocks, seed=1)
out = np.zeros(threads_per_block * blocks, dtype=np.float32)

compute_pi[blocks, threads_per_block](rng_states, 10000, out)
print('pi:', out.mean())

